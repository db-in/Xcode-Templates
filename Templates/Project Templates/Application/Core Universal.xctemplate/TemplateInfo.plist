<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<!-- Header -->

	<key>Identifier</key>
	<string>com.micro-feature.UniversalBuild</string>

	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>

	<!-- Macros -->

	<key>Macros</key>
	<dict>
		<key>UNIVERSALSCRIPT</key>
		<string>
######################
# Options
######################

REVEAL_ARCHIVE_IN_FINDER=false
FRAMEWORK_NAME="${PROJECT_NAME}"
FRAMEWORK_SCHEME="${PROJECT_NAME}"
FRAMEWORK_CONFIG="Release"
#WORKING_DIR="${BUILD_DIR}"
WORKING_DIR="build"
SIMULATOR_LIBRARY_PATH="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphonesimulator/${FRAMEWORK_NAME}.framework"
DEVICE_LIBRARY_PATH="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphoneos/${FRAMEWORK_NAME}.framework"
UNIVERSAL_LIBRARY_DIR="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphoneuniversal"
FRAMEWORK="${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework"

######################
# Build Frameworks
######################

xcodebuild -target ${FRAMEWORK_SCHEME} -sdk iphonesimulator -configuration ${FRAMEWORK_CONFIG} ONLY_ACTIVE_ARCH=NO ARCHS="i386 x86_64" ENABLE_BITCODE=YES OTHER_CFLAGS="-fembed-bitcode"
xcodebuild -target ${FRAMEWORK_SCHEME} -sdk iphoneos -configuration ${FRAMEWORK_CONFIG} ONLY_ACTIVE_ARCH=NO ARCHS="armv7 armv7s arm64" ENABLE_BITCODE=YES OTHER_CFLAGS="-fembed-bitcode"

######################
# Create directory for universal
######################

rm -rf "${UNIVERSAL_LIBRARY_DIR}"
mkdir -p "${FRAMEWORK}"

######################
# Copy files Framework
######################

cp -r "${DEVICE_LIBRARY_PATH}/." "${FRAMEWORK}"

######################
# Make an universal binary
######################

lipo "${SIMULATOR_LIBRARY_PATH}/${FRAMEWORK_NAME}" "${DEVICE_LIBRARY_PATH}/${FRAMEWORK_NAME}" -create -output "${FRAMEWORK}/${FRAMEWORK_NAME}" | echo

# For Swift framework, Swiftmodule needs to be copied in the universal framework
if [ -d "${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
cp -R "${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

if [ -d "${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
cp -R "${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

######################
# On Release, copy the result to release directory
######################

OUTPUT_DIR="${PROJECT_DIR}/../Output/"

rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
cp -r "${FRAMEWORK}" "$OUTPUT_DIR"
rm -rf "${WORKING_DIR}"

if [ ${REVEAL_ARCHIVE_IN_FINDER} = true ]; then
open "${OUTPUT_DIR}/"
fi
		</string>
	</dict>

	<!-- Targets and Frameworks -->

	<key>Targets</key>
	<array>
		<dict>
		<key>Name</key>
		<string>Universal</string>
		<key>TargetType</key>
		<string>Aggregate</string>
		<key>TargetIdentifier</key>
		<string>com.apple.dt.aggregateTarget</string>
		<key>SharedSettings</key>
		<dict>
			<key>PRODUCT_NAME</key>
			<string>Universal</string>
		</dict>
		<key>BuildPhases</key>
		<array>
			<dict>
				<key>Class</key>
				<string>ShellScript</string>
				<key>ShellPath</key>
				<string>/bin/sh</string>
				<key>ShellScript</key>
				<string>
######################
# Options
######################

REVEAL_ARCHIVE_IN_FINDER=false
FRAMEWORK_NAME="${PROJECT_NAME}"
FRAMEWORK_SCHEME="${PROJECT_NAME}"
FRAMEWORK_CONFIG="Release"
#WORKING_DIR="${BUILD_DIR}"
WORKING_DIR="build"
SIMULATOR_LIBRARY_PATH="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphonesimulator/${FRAMEWORK_NAME}.framework"
DEVICE_LIBRARY_PATH="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphoneos/${FRAMEWORK_NAME}.framework"
UNIVERSAL_LIBRARY_DIR="${WORKING_DIR}/${FRAMEWORK_CONFIG}-iphoneuniversal"
FRAMEWORK="${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework"

######################
# Build Frameworks
######################

xcodebuild -target ${FRAMEWORK_SCHEME} -sdk iphonesimulator -configuration ${FRAMEWORK_CONFIG} ONLY_ACTIVE_ARCH=NO ARCHS="i386 x86_64" ENABLE_BITCODE=YES OTHER_CFLAGS="-fembed-bitcode"
xcodebuild -target ${FRAMEWORK_SCHEME} -sdk iphoneos -configuration ${FRAMEWORK_CONFIG} ONLY_ACTIVE_ARCH=NO ARCHS="armv7 armv7s arm64" ENABLE_BITCODE=YES OTHER_CFLAGS="-fembed-bitcode"

######################
# Create directory for universal
######################

rm -rf "${UNIVERSAL_LIBRARY_DIR}"
mkdir -p "${FRAMEWORK}"

######################
# Copy files Framework
######################

cp -r "${DEVICE_LIBRARY_PATH}/." "${FRAMEWORK}"

######################
# Make an universal binary
######################

lipo "${SIMULATOR_LIBRARY_PATH}/${FRAMEWORK_NAME}" "${DEVICE_LIBRARY_PATH}/${FRAMEWORK_NAME}" -create -output "${FRAMEWORK}/${FRAMEWORK_NAME}" | echo

# For Swift framework, Swiftmodule needs to be copied in the universal framework
if [ -d "${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
cp -R "${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

if [ -d "${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
cp -R "${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

######################
# On Release, copy the result to release directory
######################

OUTPUT_DIR="${PROJECT_DIR}/../Output/"

rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
cp -r "${FRAMEWORK}" "$OUTPUT_DIR"
rm -rf "${WORKING_DIR}"

if [ ${REVEAL_ARCHIVE_IN_FINDER} = true ]; then
open "${OUTPUT_DIR}/"
fi
</string>
				</dict>
			</array>
		</dict>
	</array>

	<!-- User Options -->

	<key>Options</key>
	<array>

		<dict>
			<key>Identifier</key>
			<string>swiftlint</string>
			<key>Default</key>
			<string>SwiftLint on every build</string>
			<key>Description</key>
			<string>Installs the SwiftLint script, which checks the code against our Code Guidelines compliance</string>
			<key>Name</key>
			<string>SwiftLint</string>
			<key>SortOrder</key>
			<integer>2</integer>
			<key>Type</key>
			<string>popup</string>
			<key>NotPersisted</key>
			<false/>
			<key>Units</key>
			<dict>

				<key>SwiftLint on every build</key>
				<dict>
					<key>Targets</key>
					<array>
						<dict>
							<key>Dependencies</key>
							<array>
								<string>1</string>
							</array>
						</dict>
					</array>
				</dict>

				<key>SwiftLint on a separated target</key>
				<dict>
				</dict>

			</dict>
		</dict>

		<dict>
			<key>Identifier</key>
			<string>universalBuild</string>
			<key>Default</key>
			<string>true</string>
			<key>Description</key>
			<string>Adds the universal build script as a separated target</string>
			<key>Name</key>
			<string>Includes Universal build script</string>
			<key>SortOrder</key>
			<integer>3</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>NotPersisted</key>
			<false/>
			<key>Units</key>
			<dict>

				<key>true</key>
				<dict>

					<key>Components</key>
					<array>
						<dict>
							<key>Identifier</key>
							<string>com.micro-feature.UniversalBuild</string>
							<key>Name</key>
							<string>Universal</string>
						</dict>
					</array>

				</dict>

				<key>false</key>
				<dict>
				</dict>

			</dict>
		</dict>

	</array>

</dict>
</plist>
